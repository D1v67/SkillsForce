@model IEnumerable<Common.SkillsForce.Entity.TrainingModel>


<style>
    #trainingTable {
        margin-top: 20px; /* Adjust the value as needed */
    }

    .btn-group {
        margin-bottom: 20px; /* Adjust the value as needed */
    }
</style>

<style>
    .modal-content {
        border-radius: 10px;
    }

    .modal-header {
        background-color: #007bff;
        color: #fff;
        border-bottom: 2px solid #0056b3;
        border-radius: 10px 10px 0 0;
    }

    .modal-body {
        padding: 20px;
    }

    .training-details {
        margin-top: 20px;
    }

        .training-details p {
            margin-bottom: 10px;
        }

    #userIdInfo {
        font-weight: bold;
    }

    .modal-footer {
        border-top: 2px solid #0056b3;
        border-radius: 0 0 10px 10px;
    }

    .btn-secondary {
        background-color: #6c757d;
        color: #fff;
    }

        .btn-secondary:hover {
            background-color: #495057;
            color: #fff;
        }
</style>

@if (TempData["ErrorMessage"] != null)
{
    <div id="error-alert" class="alert alert-danger">
        <strong>Error:</strong> @TempData["ErrorMessage"]
    </div>

    <script>
        // Display error message for 5 seconds (5000 milliseconds)
        setTimeout(function () {
            $("#error-alert").fadeOut("slow", function () {
                $(this).remove();
            });
        }, 5000);
    </script>
}
else if (TempData["SuccessMessage"] != null)
{
    <div id="success-alert" class="alert alert-success">
        <strong>Success:</strong> @TempData["SuccessMessage"]
    </div>

    <script>
        // Display success message for 5 seconds (5000 milliseconds)
        setTimeout(function () {
            $("#success-alert").fadeOut("slow", function () {
                $(this).remove();
            });
        }, 5000);
    </script>
}

@*<button id="AddTrainingButton">Add Training</button>*@


<div class="container-fluid mt-3">

    @*<button id="AddTrainingButton" class="btn btn-primary me-2" onclick="redirectToCreateTraining()">Add Training</button>*@



    <!--<p>
        @Html.ActionLink("Add Training", "CreateTraining", "Training", new { @class = "btn btn-primary me-2" })-->
    <!-- Added me-2 for margin-right -->
    <!--</p>-->
    @*<p>
            <button id="AddTraining" class="btn btn-primary me-2" onclick="redirectToCreateTraining()">Add Training</button>
        </p>*@


    <div id="errorDiv" class="alert alert-danger" style="display: none;"></div>



    <a id="AddTrainingButton" href="/Training/CreateTraining/" class="btn btn-info btn-sm me-2">Add Training</a>
    <!-- ... other buttons ... -->
    <!-- Your table structure without Razor syntax -->
    <table id="trainingTable" class="table table-striped table-hover table-bordered mt-4">
        <thead>
            <tr>
                <th>Training Name</th>
                <th>Training Description</th>
                <th>Registration Deadline</th>
                <th>Capacity</th>
                <th>Department ID</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody></tbody>


    </table>
</div>


<button type="button" class="btn btn-secondary btn-sm me-2 enroll-btn" data-toggle="modal" data-target="#enrollModal">Details</button>

<div class="modal fade" id="enrollModal" tabindex="-1" role="dialog" aria-labelledby="registrationModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="registrationModalLabel">Training Details</h5>
                <button type="button" class="close" data-bs-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>


            <div class="modal-body" id="modalBody">



                <div class="training-details">
                    <p><strong>Training Name:</strong> <span id="trainingName"></span></p>
                    <p><strong>TrainingDescription:</strong> <span id="trainingDesc"></span></p>
                    <p><strong>Registration Deadline:</strong> <span id="registrationDeadline"></span></p>
                    <p><strong>Start Date:</strong> <span id="startDate"></span></p>
                    <p><strong>Capacity:</strong> <span id="capacity"></span></p>
                    <p><strong>Department ID:</strong> <span id="departmentID"></span></p>
                    <p><strong>Prerequisites:</strong> <span id="prerequisites"></span></p>
                </div>

                <input type="hidden" id="currentEnrollmentId" value="" />

                @*<button type="submit" class="btn btn-primary" id="saveBtn">Save</button>*@
            </div>


            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>




<!-- Confirmation Modal -->
<div class="modal fade" id="confirmationModal" tabindex="-1" role="dialog" aria-labelledby="confirmationModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="confirmationModalLabel">Confirmation</h5>
                <button type="button" class="close" data-bs-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete this training?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">No</button>
                <button type="button" class="btn btn-danger" id="confirmDelete">Yes, Delete</button>
            </div>
        </div>
    </div>
</div>



<link href="
https://cdn.datatables.net/1.13.7/css/dataTables.bootstrap5.min.css"
      rel="stylesheet" />
<script defer src="
https://cdn.datatables.net/1.13.7/js/jquery.dataTables.min.js"></script>
<script defer src="
https://cdn.datatables.net/1.13.7/js/dataTables.bootstrap5.min.js"></script>
<link href="
https://cdn.datatables.net/1.13.7/css/dataTables.bootstrap5.min.css"
      rel="stylesheet" />
<script defer src="
https://cdn.datatables.net/1.13.7/js/jquery.dataTables.min.js"></script>
<script defer src="


https://cdn.datatables.net/1.13.7/js/dataTables.bootstrap5.min.js"></script>


<script>
    function redirectToCreateTraining() {
        // Redirect to the specified controller action
        window.location.href = "/Training/CreateTraining";

    }
</script>

<script>

    $(document).ready(function () {


        // Handle delete button click
        $(document).on('click', 'a[id^="DeleteTrainingButton"]', function () {
            var trainingID = $(this).data('training-id');

            console.log(trainingID)
            // Set the training ID to the confirmation modal
            $('#confirmationModal').data('training-id', trainingID);

            // Show the confirmation modal
            $('#confirmationModal').modal('show');
        });

        // Handle confirm delete button click
        $(document).on('click', '#confirmDelete', function () {
            // Get the training ID from the confirmation modal
            var trainingID = $('#confirmationModal').data('training-id');
            console.log(trainingID)
            // Make an AJAX call to delete the training
            $.ajax({
                url: "/Training/Delete/" + trainingID,
                type: 'GET', // Change to the appropriate HTTP method for your application
                success: function (result) {
                    // Handle success (e.g., reload the DataTable)
                   // $('#trainingTable').DataTable().ajax.reload();

                    if (result.success) {
                        $('#trainingTable').DataTable().ajax.reload();
                        $('#errorDiv').html(result.message).removeClass('alert-danger').addClass('alert alert-success').show();
                    } else {
                        $('#errorDiv').html(result.message).removeClass('alert-success').addClass('alert alert-danger').show();

                        console.log(result.message)
                    }
                },
                error: function () {
                    $('#errorDiv').html("An error occurred while processing your request.").addClass('alert alert-danger').show();
                }


              
            });

            // Hide the confirmation modal
            $('#confirmationModal').modal('hide');
        });



        // Additional click event for "Details" link
        $(document).on('click', '.details-btn', function () {
            var trainingID = $(this).data('training-id');
            console.log(trainingID)
            // Make an AJAX call to fetch details based on the trainingID
            $.ajax({
                url: "/Training/GetTrainingDetails/" + trainingID,
                type: 'GET',
                success: function (result) {
                    console.log(result);

                    // Populate modal with details
                    $('#trainingName').text(result.TrainingName);
                    $('#trainingDesc').text(result.TrainingDescription);
                    $('#registrationDeadline').text(result.RegistrationDeadline);
                    $('#startDate').text(result.StartDate);
                    $('#capacity').text(result.Capacity);
                    $('#departmentID').text(result.DepartmentID);

                    // Display prerequisites if available
                    if (result.Prerequisites && result.Prerequisites.length > 0) {
                        var prerequisitesList = result.Prerequisites.map(function (prerequisite) {
                            return prerequisite.PrerequisiteName;
                        }).join(', ');

                        $('#prerequisites').text(prerequisitesList);
                    } else {
                        $('#prerequisites').text('No prerequisites for this training.');
                    }

                    // Show the modal
                    $('#enrollModal').modal('show');
                },
                error: function (error) {
                    console.error(error.responseText);
                }
            });
        });



        // Get the user ID from the session or wherever it's stored
        // Permission check script
        var userId = parseInt("@HttpContext.Current.Session["UserID"]");
        var permissionsToCheck = ['EditTraining', 'ViewTrainingDetails', 'DeleteTraining', 'AddTraining'];

        // Hide the buttons after DataTable initialization
        $('#trainingTable').on('draw.dt', function () {
            $("a[id^='EditTrainingButton']").hide();
            $("a[id^='ViewTrainingDetailsButton']").hide();
            $("a[id^='DeleteTrainingButton']").hide();
        });

        $("a[id^='AddTrainingButton']").hide();
        // Make an AJAX call to check the permissions
        $.ajax({
            url: "/UserAuthorization/CheckPermissions",
            type: 'POST',
            contentType: 'application/json',
            data: JSON.stringify({ userId: userId, permissions: permissionsToCheck }),
            success: function (result) {
                // Iterate through the result and show links accordingly
                $.each(result, function (permission, hasPermission) {
                    if (hasPermission) {
                        // Show the links since the user has the permission
                        $('#trainingTable').on('draw.dt', function () {
                           // $("a[id^='EditTrainingButton']").show();

                            $("a[id^='" + permission + "Button']").show();
                        });

                    }
                });
            },
            error: function (error) {
                console.error(error.responseText);
            }
        });




        $('#trainingTable').DataTable({
            "ajax": {
                "url": "/Training/GetAll", // Update this URL to match your controller's action
                "type": "POST",  // Corrected to POST
                "datatype": "json",
                "dataSrc": function (data) {
                    console.log('Data retrieved successfully:', data); // Log the data
                    return data;
                },
                "error": function (xhr, error, thrown) {
                    console.error('Error fetching data:', error);
                }
            },
            "columns": [
                { "data": "TrainingName" },
                { "data": "TrainingDescription" },
                {
                    "data": "RegistrationDeadline",
                    "render": function (data) {
                        return formatDateTime(data);
                    }
                },
                { "data": "Capacity", "orderable": false },
                { "data": "DepartmentID" },
                {
                    "data": null,
                    "orderable": false, // Set to non-orderable
                    "render": function (data) {
                        return '<a id="EditTrainingButton" href="/Training/Edit/' + data.TrainingID + '" class="btn btn-info btn-sm me-2">Edit</a>' +
                            '<a href="javascript:void(0);" class="btn btn-secondary btn-sm me-2 details-btn" data-training-id="' + data.TrainingID + '">Details</a>' +
                            '<a id="DeleteTrainingButton"  class="btn btn-danger btn-sm" data-training-id="' + data.TrainingID + '">Delete</a>';
                    }
                }
            ]
        });




        function formatDateTime(timestamp) {
            // Extracting only unix timestamp
            var match = timestamp.match(/\d+/);
            var numericPart = match ? match[0] : null;

            // Make sure to treat as millisecond
            const dateObject = new Date(parseInt(numericPart, 10))
            const day = String(dateObject.getDate()).padStart(2, '0')
            const month = String(dateObject.getMonth() + 1).padStart(2, '0')
            const year = dateObject.getFullYear()
            return `${year}-${month}-${day}`
        }
    });


      function enroll(trainingId) {

      /*$("#trainingInfo").text("Enroll in Training: " + trainingId);*/

      //var userId = 1;

      var userId = parseInt("@HttpContext.Current.Session["UserID"]");

      console.log(userId)
      $("#trainingInfo").text("Enroll in Training: " + trainingId);
      $("#userIdInfo").text("User : " + userId);

      $("#enrollModal").data("trainingId", trainingId);


      var enrollmentData = {
          UserID: userId,
          TrainingID: trainingId,

      };
      console.log(enrollmentData)

      $.ajax({
          url: '/Enrollment/GetPrerequisiteByTrainingID',
          type: 'GET',
          data: { TrainigID: trainingId },
          success: function (prerequisites) {
              console.log(prerequisites);
              if (prerequisites.length > 0) {
                  populateCoursesCheckboxList(prerequisites, trainingId);
              } else {
                  // No prerequisites, display a message in the modal
                  $("#coursesCheckboxList").html("<p>No prerequisites for this training.</p>");
              }
          },
          error: function () {
              //alert("Failed to fetch prerequisites!");
              $("#coursesCheckboxList").html("<p>Failed to fetch prerequisites. Please try again later.</p>");
          }
      });
  }



</script>

@*<div class=" container-fluid mt-3">
        <p>
            @Html.ActionLink("Create New", "CreateTraining", "Training", new { @class = "btn btn-primary" })
        </p>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>@Html.DisplayNameFor(model => model.TrainingName)</th>
                    <th>@Html.DisplayNameFor(model => model.TrainingDescription)</th>
                    <th>@Html.DisplayNameFor(model => model.RegistrationDeadline)</th>
                    <th>@Html.DisplayNameFor(model => model.Capacity)</th>
                    <th>@Html.DisplayNameFor(model => model.DepartmentID)</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model)
                {
                    <tr>
                        <td>@Html.DisplayFor(modelItem => item.TrainingName)</td>
                        <td>@Html.DisplayFor(modelItem => item.TrainingDescription)</td>
                        <td>@Html.DisplayFor(modelItem => item.RegistrationDeadline)</td>
                        <td>@Html.DisplayFor(modelItem => item.Capacity)</td>
                        <td>@Html.DisplayFor(modelItem => item.DepartmentID)</td>
                        <td>
                            @Html.ActionLink("Edit", "Edit", new { id = item.TrainingID }, new { @class = "btn btn-info btn-sm" })
                            @Html.ActionLink("Details", "Details", new { id = item.TrainingID }, new { @class = "btn btn-secondary btn-sm" })
                            @Html.ActionLink("Delete", "Delete", new { id = item.TrainingID }, new { @class = "btn btn-danger btn-sm" })
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>*@


