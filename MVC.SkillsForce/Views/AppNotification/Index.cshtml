<style>
    .notification {
        border: 1px solid #ddd;
        background-color: #fff;
        padding: 15px;
        margin-bottom: 15px;
        cursor: pointer;
        transition: box-shadow 0.3s, background-color 0.3s;
        border-radius: 15px;
    }

    .unread-notification {
        background-color: #e6f7ff; /* Light blue for unread notifications */
    }

    .read-notification {
        background-color: #f2f2f2; /* Light gray for read notifications */
    }

    .notification:hover {
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        background-color: #f9f9f9; /* Hover effect color */
    }

    .notification h5 {
        margin-bottom: 10px;
        color: #333;
    }

    .notification p {
        margin-bottom: 0;
        color: #888;
        font-size: 14px;
    }

    .container {
        max-width: 1500px;
    }

    .mt-5 {
        margin-top: 50px;
    }

    #notificationList {
        max-height: 600px;
        overflow-y: auto;
    }
</style>

@if (Session["FirstName"] != null)
{
    <button type="button" class="btn btn-primary position-relative" id="inboxButton">
        Unread
        <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger">

            @Session["UnreadNotificationCount"]

            <span class="visually-hidden">unread messages</span>
        </span>
    </button>
}


<div class="container mt-5">
    <h2>Notifications</h2>

    <div id="notificationList">
        <!-- Notifications will be dynamically added here -->
    </div>
</div>

<script>
    $(document).ready(function () {
        var userId = parseInt("@HttpContext.Current.Session["UserID"]");

        function formatDateTime(timestamp) {
            // Extracting only unix timestamp
            var match = timestamp.match(/\d+/);
            var numericPart = match ? match[0] : null;

            // Make sure to treat as millisecond
            const dateObject = new Date(parseInt(numericPart, 10))
            const day = String(dateObject.getDate()).padStart(2, '0')
            const month = String(dateObject.getMonth() + 1).padStart(2, '0')
            const year = dateObject.getFullYear()
            const hours = String(dateObject.getHours()).padStart(2, '0');
            const minutes = String(dateObject.getMinutes()).padStart(2, '0');
            const seconds = String(dateObject.getSeconds()).padStart(2, '0');

            return `${year}-${month}-${day} ${hours}:${minutes}`;
        }

        $.ajax({
            url: '/AppNotification/GetByUserId/' + userId,
            method: 'GET',
            success: function (notifications) {
                notifications.forEach(function (notification) {
                    var notificationDiv = $('<div>').attr('id', 'notification_' + notification.AppNotificationID)
                        .addClass('notification');

                    var title = $('<h5>').text(notification.NotificationMessage);
                    var time = $('<p>').text('Received at: ' + formatDateTime(notification.CreateTimeStamp));

                    notificationDiv.append(title, time);

                    if (notification.HasRead === false) {
                        notificationDiv.addClass('unread-notification');
                        notificationDiv.click(function () {
                            $.ajax({
                                url: '/AppNotification/MarkNotificationAsRead',
                                method: 'POST',
                                data: { notificationId: notification.AppNotificationID, userId: userId },
                                success: async function (response) {
                                    // Notification marked as read
                                    notificationDiv.removeClass('unread-notification');
                                    // Update session variable for unread notification count
                                    //await updateUnreadNotificationCount();

                                    window.location.href = response.redirectUrl;
                                },
                                error: function (error) {
                                    console.error('Error marking notification as read:', error);
                                }
                            });
                        });
                    } else {
                        notificationDiv.addClass('read-notification');
                    }

                    $('#notificationList').append(notificationDiv);
                });
            },
            error: function (error) {
                console.error('Error fetching notifications:', error);
            }
        });
    });
</script>