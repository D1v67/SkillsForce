<style>
    .notification {
        border: 1px solid #ddd;
        background-color: #fff;
        padding: 15px;
        margin-bottom: 15px;
        cursor: pointer;
        transition: box-shadow 0.3s, background-color 0.3s;
        border-radius: 15px;
    }

    .unread-notification {
        background-color: #e6f7ff; /* Light blue for unread notifications */
    }

    .read-notification {
        background-color: #f2f2f2; /* Light gray for read notifications */
    }

    .notification:hover {
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        background-color: #ffd583; /* Hover effect color */
    }

    .notification h5 {
        margin-bottom: 10px;
        color: #333;
    }

    .notification p {
        margin-bottom: 0;
        color: #888;
        font-size: 14px;
    }

    .container {
        max-width: 1500px;
    }

    .mt-5 {
        margin-top: 50px;
    }

    #notificationList {
        max-height: 600px;
        overflow-y: auto;
    }

    .sender-text {
        font-weight: bold;
        font-size: 16px; /* Adjust the size as needed */
    }

    .subject-text {
        margin-left: 60px;
        font-weight: bold;
        font-size: 14px; /* Adjust the size as needed */
    }

    .received-text {
        float: right;
        font-size: 12px; /* Adjust the size as needed */


    }

    .message-text {
        margin-left: 20px;
        overflow: hidden;
        white-space: nowrap;
        text-overflow: ellipsis;
        font-size: 14px;
        color: #555;
    }
</style>

@if (Session["FirstName"] != null)
{
    <button type="button" class="btn btn-primary position-relative" id="inboxButton">
        Unread
        <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger">

            @Session["UnreadNotificationCount"]

            <span class="visually-hidden">unread messages</span>
        </span>
    </button>
}


<div class="container mt-5">
    <h2>Notifications</h2>

    <div id="notificationList">
        <!-- Notifications will be dynamically added here -->
    </div>
</div>


<!-- Bootstrap Modal for displaying full notification message -->
<div class="modal fade " id="notificationModal" tabindex="-1" role="dialog" aria-labelledby="notificationModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="notificationModalLabel">Notification Message</h5>
                <button type="button" class="close" data-bs-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p id="notificationMessage"></p>
            </div>
        </div>
    </div>
</div>

<script>
    $(document).ready(function () {
        var userId = parseInt("@HttpContext.Current.Session["UserID"]");

        function formatDateTime(timestamp) {
            // Extracting only unix timestamp
            var match = timestamp.match(/\d+/);
            var numericPart = match ? match[0] : null;

            // Make sure to treat as millisecond
            const dateObject = new Date(parseInt(numericPart, 10))
            const day = String(dateObject.getDate()).padStart(2, '0')
            const month = String(dateObject.getMonth() + 1).padStart(2, '0')
            const year = dateObject.getFullYear()
            const hours = String(dateObject.getHours()).padStart(2, '0');
            const minutes = String(dateObject.getMinutes()).padStart(2, '0');
            const seconds = String(dateObject.getSeconds()).padStart(2, '0');

            return `${year}-${month}-${day} ${hours}:${minutes}`;
        }

        $.ajax({
            url: '/AppNotification/GetByUserId/' + userId,
            method: 'GET',
            success: function (notifications) {
                notifications.forEach(function (notification) {
                    var notificationDiv = $('<div>').attr('id', 'notification_' + notification.AppNotificationID)
                        .addClass('notification list-group-item');
                    var senderSubjectTimeDiv = $('<div>').addClass('sender-subject-time');

                    var sender = $('<span>').text(notification.NotificationSender).addClass('sender-text');
                    var subject = $('<span>').text(' ' + notification.NotificationSubject).addClass('subject-text');
                    var message = $('<span>').text(truncateText(notification.NotificationMessage, 30)).addClass('message-text');
                    var time = $('<span>').text(formatDateTime(notification.CreateTimeStamp)).addClass('received-text');

                    senderSubjectTimeDiv.append(sender, subject, message, time);
                    notificationDiv.append(senderSubjectTimeDiv);



                    if (notification.HasRead === false) {
                        notificationDiv.addClass('unread-notification');
                        notificationDiv.click(function () {
                            $('#notificationMessage').text(notification.NotificationMessage);
                            $('#notificationModal').modal('show');

                            // Set a callback for when the modal is hidden
                            $('#notificationModal').on('hidden.bs.modal', function () {
                                // Mark the notification as read
                                markNotificationAsRead(notification.AppNotificationID, notificationDiv);
                            });
                        });
                    } else {
                        notificationDiv.addClass('read-notification');
                        notificationDiv.click(function () {
                            $('#notificationMessage').text(notification.NotificationMessage);
                            $('#notificationModal').modal('show');
                        });
                    }

                    $('#notificationList').append(notificationDiv);
                });
            },
            error: function (error) {
                console.error('Error fetching notifications:', error);
            }
        });

        function markNotificationAsRead(notificationId, notificationDiv) {
            $.ajax({
                url: '/AppNotification/MarkNotificationAsRead',
                method: 'POST',
                data: { notificationId: notificationId, userId: userId },
                success: function (response) {
                    // Update session variable for unread notification count
                    //await updateUnreadNotificationCount();
                    notificationDiv.removeClass('unread-notification');
                    window.location.href = response.redirectUrl;
                },
                error: function (error) {
                    console.error('Error marking notification as read:', error);
                }
            });
        }


        // Function to truncate text to a specified length
        function truncateText(text, maxLength) {
            if (text.length > maxLength) {
                return text.substring(0, maxLength) + '  . . . ';
            }
            return text;
        }
    });
</script>