

@model IEnumerable<Common.SkillsForce.Entity.TrainingModel>

@{
    ViewBag.Title = "Index";
}


<script src="~/Scripts/jquery-3.7.1.min.js"></script>

<script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js" integrity="sha512-VEd+nq25CkR676O+pLBnDW09R7VQX9Mdiij052gVCp5yVH3jGtH70Ho/UUv4mJDsEdTvqRCFZg0NKGiojGnUCw==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>

<script type="text/javascript" src="
    https://ajax.googleapis.com/ajax/libs/jquery/3.6.1/jquery.min.js"></script>
@*
    https://codeseven.github.io/toastr/*@
<script type="text/javascript" src="
    https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/js/toastr.min.js"></script>
<link rel="stylesheet" href="
    https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/css/toastr.min.css">

<style>
    .card-container {
        padding: 20px;
    }

    .card {
        /*border: none;*/
        border-radius: 15px;
        transition: transform 0.3s ease-in-out;
        box-shadow: 0 8px 16px rgba(0, 0, 0, 0.3);
        margin-bottom: 40px;
    }

    .card-header {
        background-color: #3498db;
        color: #fff;
        padding: 10px;
        border-top-left-radius: 15px;
        border-top-right-radius: 15px;
    }

    .card:hover {
        transform: scale(1.05);
        box-shadow: 0 12px 24px rgba(0, 0, 0, 0.4);
    }

    .card-body {
        background-color: #e8eceb;
        padding: 15px;
    }

    .header-container {
        background: linear-gradient(131deg, rgba(9,91,134,1) 0%, rgba(93,184,218,1) 46%, rgba(34,114,215,1) 75%, rgba(22,157,217,1) 95%);
        padding: 20px;
        color: #fff;
        text-align: center;
        margin-bottom: 30px;
        border-radius: 15px;
        box-shadow: 0 8px 16px rgba(0, 0, 0, 0.3);
    }

    h1 {
        margin: 0;
    }

    .error-border {
        border: 1px solid #dc3545 !important;
        border-radius: 0.2rem !important;
        transition: border-color 0.2s ease-in-out;
        animation: glow 1s infinite alternate;
    }

    @@keyframes glow {
        from {
            box-shadow: 0 0 5px #dc3545;
        }

        to {
            box-shadow: 0 0 10px #dc3545;
        }
    }

    .spinner-wrapper {
        background-color: rgba(0, 0, 0, 0.4);
        position: fixed;
        top: 0;
        width: 100%;
        height: 100%;
        z-index: 9999999999999;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .spinner-border {
        height: 60px;
        width: 60px;
    }
</style>

<div class="spinner-wrapper" style="display: none;">
    <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>

</div>

<div class="table-responsive container-fluid mt-5 mb-5">

    <!-- Search and View Buttons -->
    <div class="row mb-3">
        <div class="col-md-10 d-flex align-items-center">
            <div class="input-group">
                <span class="input-group-text" id="searchIcon">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-search" viewBox="0 0 16 16">
                        <path d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001c.03.04.062.078.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1.007 1.007 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0" />
                    </svg>
                </span>
                <input type="text" class="form-control" id="searchInput" placeholder="Search trainings...">
            </div>
        </div>
    </div>

    <!-- Training Cards and Table -->
    <div id="EnrollmentsMessage" class="alert alert-danger mt-3">
        Trainings you have been rejected in ...

    </div>


    <div id="trainingCardContainer" class="card-deck mt-5"></div>
</div>


<div class="modal fade" id="attachmentModal" tabindex="-1" role="dialog" aria-labelledby="registrationModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="registrationModalLabel">View  Attachments</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>

            <div class="modal-body" id="attachmentModalBody"></div>


            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>


<!-- Enroll Modal -->
<div class="modal fade" id="enrollModal" tabindex="-1" role="dialog" aria-labelledby="registrationModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="registrationModalLabel">Training Registration</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>

            <form id="enrollForm" onsubmit="saveEnrollment(); return false;" enctype="multipart/form-data">
                <div class="modal-body" id="modalBody">
                    <h3>Enroll in Training</h3>
                    @*<p>Your User ID: <span id="userIdInfo"></span></p>*@
                    <p id="trainingInfo"></p>

                    <div id="coursesCheckboxList"></div>

                    <input type="hidden" id="currentEnrollmentId" value="" />
                </div>
            </form>

            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>


<script src="~/Scripts/jquery-3.7.1.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script src="
https://cdn.jsdelivr.net/npm/lodash@4.17.21/lodash.min.js
"></script>

<link href="
https://cdn.datatables.net/1.13.7/css/dataTables.bootstrap5.min.css"
      rel="stylesheet" />
<script defer src="
https://cdn.datatables.net/1.13.7/js/jquery.dataTables.min.js"></script>
<script defer src="
https://cdn.datatables.net/1.13.7/js/dataTables.bootstrap5.min.js"></script>
<link href="
https://cdn.datatables.net/1.13.7/css/dataTables.bootstrap5.min.css"
      rel="stylesheet" />
<script defer src="
https://cdn.datatables.net/1.13.7/js/jquery.dataTables.min.js"></script>
<script defer src="
https://cdn.datatables.net/1.13.7/js/dataTables.bootstrap5.min.js"></script>

<script>

    document.addEventListener("DOMContentLoaded", function () {

     var userId = parseInt("@HttpContext.Current.Session["UserID"]");


        const searchInput = $("#searchInput");

        loadData( searchInput.val());


        searchInput.on("input", function () {

            loadData( $(this).val());

        });


        function loadData( searchTerm) {


            var userId = parseInt("@HttpContext.Current.Session["UserID"]");

            fetch('/Enrollment/ViewRejectedEnrollmentsData', {
                method: 'POST',
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ id: userId })
            })
                .then(response => {
                    if (response.ok) {
                        return response.json()
                    }
                    else {
                        console.log(response.status)
                    }
                })
                .then(data => {
                    if (searchTerm) {
                        data = _.filter(data, training => training.TrainingName.toLowerCase().includes(searchTerm.toLowerCase()));
                    }
                    updateTable(data);

                })
                .catch(error => console.error('Error:', error));
        }


        function updateTable(data) {
            var cardContainer = document.querySelector('#trainingCardContainer');
            cardContainer.innerHTML = '';

            data.forEach(function (item) {
                let currentDate = new Date().toJSON().slice(0, 10);
                var registrationDeadlineDate = new Date(parseInt(item.TrainingRegistrationDeadline.substr(6)));
                var isEnrollmentOpen = registrationDeadlineDate >= new Date();

                console.log(data)

                var col = document.createElement('div');
                col.className = 'col-md-4 mb-3';

                var card = document.createElement('div');
                card.className = 'card shadow';

                card.innerHTML = `
                        <div class="card-header">
                            <h5 class="card-title"><strong>${item.TrainingName}</strong> </h5>
                        </div>
                        <div class="card-body">
                             <p><strong>Decline Reason: </strong> ${item.DeclineReason} <p>
                            <p><strong>Start Date:</strong> ${formatDateTime(item.TrainingRegistrationDeadline)}</p>
                            <p><strong>Start Date:</strong> ${formatDateTime(item.TrainingStartDate)}</p>


                            ${true ? `<button type="button"  class="btn btn-info view-attachments-btn" data-bs-toggle="modal" data-bs-target="#attachmentModal"  data-training-id="${item.EnrollmentID}" onclick="showAttachments(${item.EnrollmentID})">View Attachments</button>` : '<span style="color: red;">Enrollment Closed</span>'}

                                ${isEnrollmentOpen ? `<button type="button" class="btn btn-primary enroll-btn" data-toggle="modal" data-target="#enrollModal" data-training-id="${item.TrainingID}" onclick="enroll(${item.TrainingID}, ${item.EnrollmentID})">Re-Enroll</button>` : '<span style="color: red;"><b>Enrollment Closed<b></span>'}
</div>
                        </div>
                     `;
                // ...

                col.appendChild(card);
                cardContainer.appendChild(col);
            });
        }

        function formatDateTime(timestamp) {
            // Extracting only unix timestamp
            var match = timestamp.match(/\d+/);
            var numericPart = match ? match[0] : null;

            const dateObject = new Date(parseInt(numericPart, 10))
            const day = String(dateObject.getDate()).padStart(2, '0')
            const month = getMonthName(dateObject.getMonth() + 1);
            const year = dateObject.getFullYear()

            return `${day} ${month} ${year}`;
        }

        function getMonthName(monthNumber) {
            const months = [
                'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',
                'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'
            ];

            return months[monthNumber - 1];
        }
        //// format date in 'YYYY-MM-DD'
        //function formatDate(date) {
        //    var year = date.getFullYear();
        //    var month = ('0' + (date.getMonth() + 1)).slice(-2);
        //    var day = ('0' + date.getDate()).slice(-2);
        //    return year + '-' + month + '-' + day;
        //}//// format date in 'YYYY-MM-DD'
        //function formatDate(date) {
        //    var year = date.getFullYear();
        //    var month = ('0' + (date.getMonth() + 1)).slice(-2);
        //    var day = ('0' + date.getDate()).slice(-2);
        //    return year + '-' + month + '-' + day;
        //}

    });
</script>


<script>

    function showAttachments(enrollmentId) {

        console.log(enrollmentId)
        $.ajax({

            url: '/Attachment/GetAllAttachmentByEnrollmentID',
            type: 'GET',
            data: { enrollmentID: parseInt(enrollmentId) },
            dataType: "json",
            success: function (result) {
                var attachments = result.result;
                var modalBody = $('#attachmentModalBody');
                modalBody.empty();

                for (let i = 0; i < attachments.length; i++) {
                    var attachmentInfo = attachments[i];
                    var viewButton = $('<button class="btn btn-info view-attachment-btn" data-attachment-id="' + attachmentInfo.AttachmentID + '">View</button>');
                    var downloadButton = $('<button class="btn btn-success download-attachment-btn ml-2" data-attachment-id="' + attachmentInfo.AttachmentID + '">Download</button>');

                    var attachmentInfoContainer = $('<div class="attachment-info-container"></div>');
                    attachmentInfoContainer.append('<p class="prerequisite-name">Prerequisite Name: ' + attachmentInfo.PrerequisiteName + '</p>');
                    attachmentInfoContainer.append('<p class="file-name">File Name: ' + attachmentInfo.FileName + '</p>');
                    attachmentInfoContainer.append(viewButton);
                    attachmentInfoContainer.append(downloadButton);

                    modalBody.append(attachmentInfoContainer);

                    viewButton.click(function () {
                        var attachmentId = $(this).data("attachment-id");
                        window.open('/Attachment/ViewAttachmentByAttachmentID/' + attachmentId, '_blank');
                    });

                    downloadButton.click(function () {
                        var attachmentId = $(this).data("attachment-id");
                        window.location.href = '/Attachment/DownloadAttachmentByAttachmentID/' + attachmentId;
                    });
                }

                $('#attachmentModal').modal('show');
            },
            error: function (e) {
                alert('Error fetching attachments.');
            }
        });
    }




    function populateCoursesCheckboxList(prerequisites, trainingId) {
        var container = $("#coursesCheckboxList");
        container.empty();

        // Add label for prerequisites
        var prerequisitesLabel = $('<label class="mb-3 text-danger">You must meet all the following prerequisites:</label>');

        container.append(prerequisitesLabel);

        for (var i = 0; i < prerequisites.length; i++) {
            var prerequisite = prerequisites[i];

            var row = $(
                '<div class="row mb-3 border p-3 rounded">' +
                '   <div class="col-6 col-md-12">' +
                '       <div class="mb-2">' +
                '           <label class="prerequisite-label fw-bold">' + prerequisite.PrerequisiteName + '</label>' +
                '       </div>' +
                '   </div>' +
                '   <div class="col-6 col-md-12">' +
                '       <div class="input-group">' +
                '           <input type="file" class="form-control fileUploader" id="fileInput' + prerequisite.PrerequisiteID + '" data-prerequisite-id="' + prerequisite.PrerequisiteID + '" required>' +
                '       </div>' +
                '   </div>' +
                '</div>'
            );

            container.append(row);
        }

        // Set unique ID for the save button using the training ID
        var saveButton = $(
            '<div class="row mb-3">' +
            '   <div class="col-12 text-center">' +
            '       <button type="button" class="btn btn-primary save-button" id="saveBtn_' + trainingId + '">Save</button>' +
            '   </div>' +
            '</div>'
        );
        saveButton.on('click', function () {
            saveEnrollment(trainingId);
        });
        container.append(saveButton);

        // Optionally, apply styling to the modal
        $('#enrollModal').find('.modal-content').addClass('rounded');
        $('#enrollModal').find('.modal-body').addClass('p-4');
    }


    function enroll(trainingId, enrollmentId) {
       var userId = parseInt("@HttpContext.Current.Session["UserID"]");

       console.log(userId)
      // $("#trainingInfo").text("Enroll in Training: " + trainingId);
       //$("#userIdInfo").text("User : " + userId);

           // Set the current enrollment ID in the hidden input field
        $("#currentEnrollmentId").val(enrollmentId);

       $("#enrollModal").data("trainingId", trainingId);


       var enrollmentData = {
           UserID: userId,
           TrainingID: trainingId,

       };
       console.log(enrollmentData)

       $.ajax({
           url: '/Enrollment/GetPrerequisiteByTrainingID',
           type: 'GET',
           data: { TrainigID: trainingId },
           success: function (prerequisites) {
               console.log(prerequisites);
               if (prerequisites.length > 0) {
                   populateCoursesCheckboxList(prerequisites, trainingId);
               } else {
                   // No prerequisites, display a message in the modal
                   $("#coursesCheckboxList").html("<p>No prerequisites for this training.</p>");
               }
           },
           error: function () {
               //alert("Failed to fetch prerequisites!");
               $("#coursesCheckboxList").html("<p>Failed to fetch prerequisites. Please try again later.</p>");
           }
       });
    }


     function uploadFiles(enrollmentId) {
                 console.log('entered function uploadFiles');

             const formData = new FormData();
             const prerequisiteIds = [];

                 // Iterate through each file input and its corresponding prerequisite ID
                 $('.fileUploader').each(function () {
                     const files = this.files;
                     const prerequisiteId = $(this).data('prerequisite-id');

                     for (const file of files) {

                         if (!file.name.toLowerCase().endsWith('.pdf')) {
                             validFile = false;
                             toastr.error('Invalid file type. Only PDF files are allowed.');
                             return;
                         }
                         formData.append('files', file);
                         //formData.append('prerequisiteIds', prerequisiteId);
                         console.log('File:', file);
                         console.log('Prerequisite ID:', prerequisiteId);
                         prerequisiteIds.push(prerequisiteId);
                     }
                 });

                 formData.append('PrerequisiteIDs', prerequisiteIds.join(','));
                 formData.append('EnrollmentID', parseInt(enrollmentId));
                 console.log('FormData:', formData);


                 $.ajax({
                     url: '/Enrollment/UploadFiles',
                     type: 'POST',
                     data: formData,
                     processData: false,
                     contentType: false,
                     success: function (data) {
                         console.log('File uploaded');
                         console.log(formData);
                     },
                     error: function (error) {
                         console.error('Error:', error);
                         console.log('Error in upload');
                     }
                 });
             }


 function saveEnrollment() {
     var trainingId = parseInt($("#enrollModal").data("trainingId"));
     var userId = parseInt("@HttpContext.Current.Session["UserID"]");

     // Retrieve the current enrollment ID from the hidden input field
     var currentEnrollmentId = $("#currentEnrollmentId").val();


     var uniqueSaveBtnId = "saveBtn_" + trainingId;
     var saveButton = $("#" + uniqueSaveBtnId);

     var filesUploaded = true;

     // Loop through file input elements
     $('.fileUploader').each(function () {
         var fileInput = $(this);
         fileInput.removeClass('error-border');
         if (!fileInput.val()) {
             filesUploaded = false;
             fileInput.addClass('error-border');
         } else {
             fileInput.removeClass('error-border');
         }
     });

     if (!filesUploaded) {
         toastr.error("Please upload files for all prerequisites.");
         return;
     }

     var validFile = true;

     $('.fileUploader').each(function () {
         var fileInput = $(this);
         var files = this.files;


         for (const file of files) {
             if (!file.name.toLowerCase().endsWith('.pdf')) {
                 validFile = false;
                 toastr.error('Invalid file type. Only PDF files are allowed.');
                 return;
             }
         }
     });

     if (!validFile) {
         return;
     }



     $(".spinner-wrapper").show();
     $.ajax({
         url: '/Enrollment/ReEnrollSaveEnrollment',
         type: 'POST',
         data: {
             UserID: parseInt(userId),
             TrainingID: trainingId,
             RejectedEnrollmentID: currentEnrollmentId,
         },
         success: function (result) {
             var generatedEnrollmentId = result.EnrollmentID;
             uploadFiles(parseInt(generatedEnrollmentId));
             toastr.success("Enrollment Successfully.");
             saveButton.prop('disabled', true);


             $(".enroll-btn").prop("disabled", false);
             $(`.enroll-btn[data-training-id="${trainingId}"]`).prop("disabled", true);

             $("#enrollModal").modal("hide");

             setTimeout(() => {
                 window.location.reload();
             }, 2000);

            // $(".spinner-wrapper").hide();
         },
         error: function () {
             alert("Enrollment failed!");
             $(".spinner-wrapper").hide();
         }
     });
 }

</script>


