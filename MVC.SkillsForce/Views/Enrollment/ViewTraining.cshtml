
@model IEnumerable<Common.SkillsForce.Entity.TrainingModel>

@{
    ViewBag.Title = "Index";
}


<script src="~/Scripts/jquery-3.7.1.min.js"></script>

<script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js" integrity="sha512-VEd+nq25CkR676O+pLBnDW09R7VQX9Mdiij052gVCp5yVH3jGtH70Ho/UUv4mJDsEdTvqRCFZg0NKGiojGnUCw==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>

<script type="text/javascript" src="
    https://ajax.googleapis.com/ajax/libs/jquery/3.6.1/jquery.min.js"></script>
@*
    https://codeseven.github.io/toastr/*@
<script type="text/javascript" src="
    https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/js/toastr.min.js"></script>
<link rel="stylesheet" href="
    https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/css/toastr.min.css">

<style>
    .card-container {
        padding: 20px;
    }

    .card {
        /*border: none;*/
        border-radius: 15px;
        transition: transform 0.3s ease-in-out;
        box-shadow: 0 8px 16px rgba(0, 0, 0, 0.3);
        margin-bottom: 40px;
    }

    .card-header {
        background-color: #3498db;
        color: #fff;
        padding: 10px;
        border-top-left-radius: 15px;
        border-top-right-radius: 15px;
    }

    .card:hover {
        transform: scale(1.05);
        box-shadow: 0 12px 24px rgba(0, 0, 0, 0.4);
    }

    .card-body {
        background-color: #e8eceb;
        padding: 15px;
    }

    .header-container {
        background: linear-gradient(131deg, rgba(9,91,134,1) 0%, rgba(93,184,218,1) 46%, rgba(34,114,215,1) 75%, rgba(22,157,217,1) 95%);
        padding: 20px;
        color: #fff;
        text-align: center;
        margin-bottom: 30px;
        border-radius: 15px;
        box-shadow: 0 8px 16px rgba(0, 0, 0, 0.3);
    }

    h1 {
        margin: 0;
    }

    .error-border {
        border: 1px solid #dc3545 !important; /* Red border color */
        border-radius: 0.2rem !important; /* Adjust border-radius as needed */
        transition: border-color 0.2s ease-in-out; /* Optional: Add a smooth transition effect */
        animation: glow 1s infinite alternate; /* Add a glowing animation */
    }

    @@keyframes glow {
        from {
            box-shadow: 0 0 5px #dc3545; /* Initial shadow color */
        }

        to {
            box-shadow: 0 0 10px #dc3545; /* Glowing shadow color */
        }
    }

    .spinner-wrapper {
        background-color: rgba(0, 0, 0, 0.4);
        position: fixed;
        top: 0;
        width: 100%;
        height: 100%;
        z-index: 9999999999999;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .spinner-border {
        height: 60px;
        width: 60px;
    }
</style>

<div class="spinner-wrapper" style="display: none;">
    <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
</div>

<div class="table-responsive container-fluid mt-5 mb-5">

    <ul class="nav nav-tabs mb-5">
        <li class="nav-item">
            <a class="nav-link active" data-bs-toggle="tab" href="#AllTrainingsTab">Trainings</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" data-bs-toggle="tab" href="#myTrainingsTab">My Trainings</a>
        </li>
    </ul>

    <div class="tab-content">
        <!-- All Trainings Tab -->
        <div class="tab-pane fade show active" id="AllTrainingsTab">

            <!-- Enroll Modal -->
            <div class="modal fade" id="enrollModal" tabindex="-1" role="dialog" aria-labelledby="registrationModalLabel" aria-hidden="true">
                <div class="modal-dialog modal-lg" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="registrationModalLabel">Training Registration</h5>
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>

                        <form id="enrollForm" onsubmit="saveEnrollment(); return false;" enctype="multipart/form-data">
                            <div class="modal-body" id="modalBody">
                                <h3>Enroll in Training</h3>
                                <p>Your User ID: <span id="userIdInfo"></span></p>
                                <p id="trainingInfo"></p>

                                <div id="coursesCheckboxList"></div>

                                <input type="hidden" id="currentEnrollmentId" value="" />
                            </div>
                        </form>

                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                        </div>
                    </div>
                </div>
            </div>


            <!-- Training Cards and Table -->
            <div id="EnrollmentsMessage" class="alert alert-info mt-3">
                Trainings you have not enrolled in...

            </div>

            <!-- Search and View Buttons -->
            <div class="row mb-3">
                <div class="col-md-10 d-flex align-items-center">
                    <div class="input-group searchDiv">
                        <span class="input-group-text" id="searchIcon">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-search" viewBox="0 0 16 16">
                                <path d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001c.03.04.062.078.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1.007 1.007 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0" />
                            </svg>
                        </span>
                        <input type="text" class="form-control" id="searchInput" placeholder="Search trainings...">
                    </div>
                </div>
                <div class="col-md-2">
                    <button type="button" class="btn btn-secondary" id="changeViewBtn" data-view="grid">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-grid-3x2" viewBox="0 0 16 16">
                            <path d="M0 3.5A1.5 1.5 0 0 1 1.5 2h13A1.5 1.5 0 0 1 16 3.5v8a1.5 1.5 0 0 1-1.5 1.5h-13A1.5 1.5 0 0 1 0 11.5zM1.5 3a.5.5 0 0 0-.5.5V7h4V3zM5 8H1v3.5a.5.5 0 0 0 .5.5H5zm1 0v4h4V8zm4-1V3H6v4zm1 1v4h3.5a.5.5 0 0 0 .5-.5V8zm0-1h4V3.5a.5.5 0 0 0-.5-.5H11z" />
                        </svg>
                        Change View
                    </button>
                </div>
            </div>




            <div id="trainingCardContainer" class="card-deck mt-5"></div>

            <div id="myDataTable">
                <table id="trainingDataTable" class="table mt-3">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Training Name</th>
                            <th>Description</th>
                            <th>Registration Deadline</th>
                            <th>Capacity</th>
                            <th>Department ID</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>

            </div>

        </div>



        <!-- My Trainings Tab -->
        <div class="tab-pane fade" id="myTrainingsTab">

            <!-- ... your content for My Trainings ... -->
            <!-- Message container for enrollments or no enrollments -->
            <div id="enrollmentsMessage" class="alert alert-info mt-3">
                <!-- The message will be dynamically updated here -->
            </div>

            <!-- Training Cards and Table -->
            <div id="trainingCardContainerAlreadyEnrolled" class="card-deck mt-5"></div>

            <table id="trainingTableAlreadyEnrolled" class="table mt-3">
                <thead>
                    <!-- ... your existing table head ... -->
                </thead>
                <tbody></tbody>
            </table>

        </div>
    </div>

</div>


<div class="modal fade" id="attachmentModal" tabindex="-1" role="dialog" aria-labelledby="registrationModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="registrationModalLabel">View Prerequisite Attachment</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>

            <div class="modal-body" id="attachmentModalBody"></div>

            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>



<script src="~/Scripts/jquery-3.7.1.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script src="
https://cdn.jsdelivr.net/npm/lodash@4.17.21/lodash.min.js
"></script>

<link href="
https://cdn.datatables.net/1.13.7/css/dataTables.bootstrap5.min.css"
      rel="stylesheet" />
<script defer src="
https://cdn.datatables.net/1.13.7/js/jquery.dataTables.min.js"></script>
<script defer src="
https://cdn.datatables.net/1.13.7/js/dataTables.bootstrap5.min.js"></script>
<link href="
https://cdn.datatables.net/1.13.7/css/dataTables.bootstrap5.min.css"
      rel="stylesheet" />
<script defer src="
https://cdn.datatables.net/1.13.7/js/jquery.dataTables.min.js"></script>
<script defer src="
https://cdn.datatables.net/1.13.7/js/dataTables.bootstrap5.min.js"></script>

<script>

    document.addEventListener("DOMContentLoaded", function () {

     var userId = parseInt("@HttpContext.Current.Session["UserID"]");

        function updateTableGrid() {
            var userId = parseInt("@HttpContext.Current.Session["UserID"]");

            // Initialize DataTable and store the reference in the global variable
            trainingDataTable = $('#trainingDataTable').DataTable({
                ajax: {
                    url: '/Enrollment/ViewTrainingData',
                    type: 'POST',
                    data: { id: userId },
                    dataSrc: function (data) {
                        console.log('Data retrieved successfully:', data);
                        return data;
                    },
                    error: function (xhr, error, thrown) {
                        console.error('Error fetching data:', error);
                    }
                },
                columns: [
                    { data: 'TrainingID' },
                    { data: 'TrainingName' },
                    { data: 'TrainingDescription' },
                    { data: 'RegistrationDeadline' },
                    { data: 'Capacity' },
                    { data: 'DepartmentID' },
                    {
                        data: 'TrainingID',
                        render: function (data, type, row) {
                            var currentDate = new Date().toJSON().slice(0, 10);
                            var registrationDeadlineDate = new Date(parseInt(row.RegistrationDeadline.substr(6)));
                            var isEnrollmentOpen = registrationDeadlineDate >= new Date();

                            return isEnrollmentOpen
                                ? `<button type="button" class="btn btn-primary enroll-btn" data-toggle="modal" data-target="#enrollModal" data-training-id="${data}" onclick="enroll(${data})">Enroll</button>`
                                : '<span style="color: red;">Enrollment Closed</span>';
                        },
                    },
                ],

                stateSave: true,
                "bDestroy": true
               
            });
        }


        const searchInput = $("#searchInput");

        loadData(true, searchInput.val());


        $('a[data-bs-toggle="tab"][href="#myTrainingsTab"]').on('shown.bs.tab', function (e) {
            GetAllEnrolledTrainings();
        });


        $("#changeViewBtn").data("view", "grid");
        $("#changeViewBtn").click(function () {

            var currentValue = $(this).data("view");

            var newValue = currentValue === "grid" ? "list" : "grid";

            $(this).data("view", newValue);

            console.log("View changed to:", newValue);

            $(this).text(newValue === "grid" ? "Grid View" : "List View");

            // Disable or enable the search button based on the current view
            if (newValue === "grid") {
                $(".searchDiv").show();
            } else {
                $(".searchDiv").hide();
            }


            if (newValue === "grid") {
                $("#trainingCardContainer").show();
                $("#myDataTable").hide();
                loadData(true, searchInput.val());
                //GetAllEnrolledTrainings(true, $(this).val());
            } else {
                $("#trainingCardContainer").hide();
                $("#myDataTable").show();
                loadData(false, searchInput.val());

                //GetAllEnrolledTrainings(false, $(this).val());
            }
        });

        searchInput.on("input", function () {

            loadData(true, $(this).val());

            GetAllEnrolledTrainings(true, $(this).val());
        });


        function loadData(isCard, searchTerm) {
            console.log('in load' + isCard)

            var userId = parseInt("@HttpContext.Current.Session["UserID"]");

            fetch('/Enrollment/ViewTrainingData', {
                method: 'POST',
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ id: userId })
            })
                .then(response => {
                    if (response.ok) {
                        return response.json()
                    }
                    else {
                        console.log(response.status)
                    }
                })
                .then(data => {
                    console.log(data)
                    if (searchTerm) {
                        data = _.filter(data, training => training.TrainingName.toLowerCase().includes(searchTerm.toLowerCase()));
                    }

                    if (isCard) {
                        updateTable(data);
                    } else {

                        updateTableGrid(data);
                    }
                })
                .catch(error => console.error('Error:', error));
        }


        function GetAllEnrolledTrainings() {
            
            var userId = parseInt("@HttpContext.Current.Session["UserID"]");
      
            console.log(userId);
            fetch('/Enrollment/GetTrainingsAlreadyEnrolledByUser', {
                method: 'POST',
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ id: userId })
            })
                .then(response => {
                    if (response.ok) {
                        return response.json();
                    } else {
                        console.log(response.status);
                    }
                })
                .then(data => {
                    console.log(data)

                    var enrollmentsMessage = document.getElementById('enrollmentsMessage');
                    if (data.length === 0) {
                        enrollmentsMessage.textContent = "No trainings enrolled.";
                    } else {
                        enrollmentsMessage.textContent = "Trainings you have enrolled in:";
                        updateTableAlreadyEnrolled(data);
                    }
                })
                .catch(error => console.error('Error:', error));
        }

        function updateTable(data) {
            var cardContainer = document.querySelector('#trainingCardContainer');
            cardContainer.innerHTML = '';

            data.forEach(function (item) {
                let currentDate = new Date().toJSON().slice(0, 10);
                var registrationDeadlineDate = new Date(parseInt(item.RegistrationDeadline.substr(6)));
                var startDate = new Date(parseInt(item.StartDate.substr(6)));
                var isEnrollmentOpen = registrationDeadlineDate >= new Date();

                var col = document.createElement('div');
                col.className = 'col-md-4 mb-3';

                var card = document.createElement('div');
                card.className = 'card shadow';

                card.innerHTML = `
                        <div class="card-header">
                            <h5 class="card-title"><strong>${item.TrainingName}</strong> </h5>
                        </div>
                        <div class="card-body">
                            <p class="card-text">${item.TrainingDescription}</p>
                            <p class="card-text"><strong>Start Date:</strong> ${formatDate(startDate)}</p>
                            <p class="card-text"><strong>Registration Deadline:</strong> ${formatDate(registrationDeadlineDate)}</p>

                            ${isEnrollmentOpen ? `<button type="button" class="btn btn-primary enroll-btn" data-toggle="modal" data-target="#enrollModal" data-training-id="${item.TrainingID}" onclick="enroll(${item.TrainingID})">Enroll</button>` : '<span style="color: red;">Enrollment Closed</span>'}
                        </div>
                     `;
                col.appendChild(card);
                cardContainer.appendChild(col);
            });
        }


        function updateTableAlreadyEnrolled(data) {
            var cardContainer = document.querySelector('#trainingCardContainerAlreadyEnrolled');
            cardContainer.innerHTML = '';

            data.forEach(function (item) {

                var col = document.createElement('div');
                col.className = 'col-md-4 mb-3';

                var card = document.createElement('div');
                card.className = 'card shadow';

                card.innerHTML = `
                        <div class="card-header">
                            <h5 class="card-title"><strong>${item.TrainingName}</strong> </h5>
                        </div>
                        <div class="card-body">
                            <p class="card-text">${item.TrainingDescription}</p>
                            <p class="card-text"><strong>Registration Deadline:</strong> ${formatDateTime(item.RegistrationDeadline)}</p>
                            <p class="card-text"><strong>Start Date:</strong> ${formatDateTime(item.StartDate)}</p>
                             ${true ? `<button type="button"  class="btn btn-info view-attachments-btn" data-bs-toggle="modal" data-bs-target="#attachmentModal"  data-training-id="${item.EnrollmentID}" onclick="showAttachments(${item.EnrollmentID})">View More</button>` : '<span style="color: red;">Enrollment Closed</span>'}
                        </div>
                     `;
                col.appendChild(card);
                cardContainer.appendChild(col);
            });
        }


        function formatDateTime(timestamp) {
            // Extracting only unix timestamp
            var match = timestamp.match(/\d+/);
            var numericPart = match ? match[0] : null;

            // Make sure to treat as millisecond
            const dateObject = new Date(parseInt(numericPart, 10))
            const day = String(dateObject.getDate()).padStart(2, '0')
            const month = String(dateObject.getMonth() + 1).padStart(2, '0')
            const year = dateObject.getFullYear()
            return `${year}-${month}-${day}`
        }
        // format date in 'YYYY-MM-DD'
        function formatDate(date) {
            var year = date.getFullYear();
            var month = ('0' + (date.getMonth() + 1)).slice(-2);
            var day = ('0' + date.getDate()).slice(-2);
            return year + '-' + month + '-' + day;
        }

    });
</script>


<script>
    function showAttachments(enrollmentId) {

        console.log(enrollmentId)
        $.ajax({
            url: '/Attachment/GetAllAttachmentByEnrollmentID',
            type: 'GET',
            data: { enrollmentID: parseInt(enrollmentId) },
            dataType: "json",
            success: function (result) {
                var attachments = result.result;
                var modalBody = $('#attachmentModalBody');
                modalBody.empty();

                for (let i = 0; i < attachments.length; i++) {
                    var attachmentInfo = attachments[i];
                    var viewButton = $('<button class="btn btn-info view-attachment-btn" data-attachment-id="' + attachmentInfo.AttachmentID + '">View</button>');
                    var downloadButton = $('<button class="btn btn-success download-attachment-btn ml-2" data-attachment-id="' + attachmentInfo.AttachmentID + '">Download</button>');

                    var attachmentInfoContainer = $('<div class="attachment-info-container"></div>');
                    attachmentInfoContainer.append('<p class="prerequisite-name">Prerequisite Name: ' + attachmentInfo.PrerequisiteName + '</p>');
                    attachmentInfoContainer.append('<p class="file-name">File Name: ' + attachmentInfo.FileName + '</p>');
                    attachmentInfoContainer.append(viewButton);
                    attachmentInfoContainer.append(downloadButton);

                    modalBody.append(attachmentInfoContainer);

                    viewButton.click(function () {
                        var attachmentId = $(this).data("attachment-id");
                        window.open('/Attachment/ViewAttachmentByAttachmentID/' + attachmentId, '_blank');
                    });

                    downloadButton.click(function () {
                        var attachmentId = $(this).data("attachment-id");
                        window.location.href = '/Attachment/DownloadAttachmentByAttachmentID/' + attachmentId;
                    });
                }

                $('#attachmentModal').modal('show');
            },
            error: function (e) {
                alert('Error fetching attachments.');
            }
        });
    }



    function enroll(trainingId) {
        var userId = parseInt("@HttpContext.Current.Session["UserID"]");

        console.log(userId)
        $("#trainingInfo").text("Enroll in Training: " + trainingId);
        $("#userIdInfo").text("User : " + userId);

        $("#enrollModal").data("trainingId", trainingId);


        var enrollmentData = {
            UserID: userId,
            TrainingID: trainingId,

        };
        console.log(enrollmentData)

        $.ajax({
            url: '/Enrollment/GetPrerequisiteByTrainingID',
            type: 'GET',
            data: { TrainigID: trainingId },
            success: function (prerequisites) {
                console.log(prerequisites);
                if (prerequisites.length > 0) {
                    populateCoursesCheckboxList(prerequisites, trainingId);
                } else {
                    // No prerequisites, display a message in the modal
                    $("#coursesCheckboxList").html("<p>No prerequisites for this training.</p>");
                }
            },
            error: function () {
                //alert("Failed to fetch prerequisites!");
                $("#coursesCheckboxList").html("<p>Failed to fetch prerequisites. Please try again later.</p>");
            }
        });
    }


    function populateCoursesCheckboxList(prerequisites, trainingId) {
        var container = $("#coursesCheckboxList");
        container.empty();

        var totalFileSizeLimitInBytes = 4 * 1048576;
        var fileSizeLimitPerPrerequisite = totalFileSizeLimitInBytes / prerequisites.length;
        // Add label for prerequisites
        var prerequisitesLabel = $('<label class="mb-3 text-danger">You must meet all the following prerequisites:</label>');

        container.append(prerequisitesLabel);

        for (var i = 0; i < prerequisites.length; i++) {
            var prerequisite = prerequisites[i];

            var row = $(
                '<div class="row mb-3 border p-3 rounded">' +
                '   <div class="col-6 col-md-12">' +
                '       <div class="mb-2">' +
                '           <label class="prerequisite-label fw-bold">' + prerequisite.PrerequisiteName + '</label>' +
                '       </div>' +
                '   </div>' +
                '   <div class="col-6 col-md-12">' +
                '       <div class="input-group">' +
                '           <input type="file" accept=".pdf" class="form-control fileUploader" id="fileInput' + prerequisite.PrerequisiteID + '" data-prerequisite-id="' + prerequisite.PrerequisiteID + '" required>' +
                '           <span class="file-size-limit-label">File size limit: ' + (fileSizeLimitPerPrerequisite / 1024) + ' KB</span>' +
                '       </div>' +
                '   </div>' +
                '</div>'
            );

            var fileInput = row.find('.fileUploader');

            fileInput.on('change', function () {
                $(".spinner-wrapper").show();// Show the spinner when a file is being loaded
                // ... Add additional logic if needed
                setTimeout(function () {
                    $(".spinner-wrapper").hide();
                }, 600);
            });



            // Add event listener to check file size before form submission
            fileInput.on('change', function () {
                var fileSize = this.files[0].size; // Size of the selected file in bytes

                if (fileSize > fileSizeLimitPerPrerequisite) {
                    toastr.error('File size exceeds the limit for this prerequisite. Please choose a smaller file.');
                    this.value = ''; // Clear the file input
                }
            });


            container.append(row);
        }

        // Set unique ID for the save button using the training ID
        var saveButton = $(
            '<div class="row mb-3">' +
            '   <div class="col-12 text-center">' +
            '       <button type="button" class="btn btn-primary save-button" id="saveBtn_' + trainingId + '">Save</button>' +
            '   </div>' +
            '</div>'
        );
        saveButton.on('click', function () {
            saveEnrollment(trainingId);
        });
        container.append(saveButton);

        // Optionally, apply styling to the modal
        $('#enrollModal').find('.modal-content').addClass('rounded');
        $('#enrollModal').find('.modal-body').addClass('p-4');
    }

    // Simulate asynchronous file upload (replace this with your actual upload logic)



      function uploadFiles(enrollmentId) {
                    console.log('entered function uploadFiles');

                const formData = new FormData();
                const prerequisiteIds = [];

                    // Iterate through each file input and its corresponding prerequisite ID
                    $('.fileUploader').each(function () {
                        const files = this.files;
                        const prerequisiteId = $(this).data('prerequisite-id');

                        for (const file of files) {

                            if (!file.name.toLowerCase().endsWith('.pdf')) {
                                validFile = false;
                                toastr.error('Invalid file type. Only PDF files are allowed.');
                                return; // Stop processing further files
                            }
                            formData.append('files', file);
                            //formData.append('prerequisiteIds', prerequisiteId);
                            console.log('File:', file);
                            console.log('Prerequisite ID:', prerequisiteId);
                            prerequisiteIds.push(prerequisiteId);
                        }
                    });

                    formData.append('PrerequisiteIDs', prerequisiteIds.join(','));
                    formData.append('EnrollmentID', parseInt(enrollmentId));
                    console.log('FormData:', formData);

                    // Perform the fetch using jQuery
                    $.ajax({
                        url: '/Enrollment/UploadFiles',
                        type: 'POST',
                        data: formData,
                        processData: false,
                        contentType: false,
                        success: function (data) {
                            console.log('File uploaded');
                            console.log(formData);
                        },
                        error: function (error) {
                            console.error('Error:', error);
                            console.log('Error in upload');
                        }
                    });
                }


function saveEnrollment() {
    var trainingId = parseInt($("#enrollModal").data("trainingId"));
    var userId = parseInt("@HttpContext.Current.Session["UserID"]");
    var uniqueSaveBtnId = "saveBtn_" + trainingId;
    var saveButton = $("#" + uniqueSaveBtnId);

    // Check if any file input is empty
    var filesUploaded = true;

    // Loop through file input elements
    // Loop through file input elements
    $('.fileUploader').each(function () {
        var fileInput = $(this);
        fileInput.removeClass('error-border');
        if (!fileInput.val()) {
            filesUploaded = false;
            fileInput.addClass('error-border'); // Add error border styling to the empty field
        } else {
            fileInput.removeClass('error-border'); // Remove error border styling if the field is not empty
        }
    });

    if (!filesUploaded) {
        toastr.error("Please upload files for all prerequisites.");
        return;
    }


    // Check file extension before proceeding with file upload
    var validFile = true;

    // Loop through file input elements
    $('.fileUploader').each(function () {
        var fileInput = $(this);
        var files = this.files;

        // Loop through files for each file input
        for (const file of files) {
            if (!file.name.toLowerCase().endsWith('.pdf')) {
                validFile = false;
                toastr.error('Invalid file type. Only PDF files are allowed.');
                return; // Stop processing further files
            }
        }
    });

    if (!validFile) {
        return; // Do not proceed with the file upload if an invalid file is detected
    }




    $(".spinner-wrapper").show();
    $.ajax({
        url: '/Enrollment/SaveEnrollment',
        type: 'POST',
        data: {
            UserID: parseInt(userId),
            TrainingID: trainingId,
        },
        success: function (result) {
            var generatedEnrollmentId = result.EnrollmentID;
            uploadFiles(parseInt(generatedEnrollmentId));
            toastr.success("Enrollment Successfully.");
            saveButton.prop('disabled', true);

            // Disable the specific "Enroll" button
            $(".enroll-btn").prop("disabled", false); // Enable all buttons before disabling the specific one
            $(`.enroll-btn[data-training-id="${trainingId}"]`).prop("disabled", true); // Disable the clicked button

            $("#enrollModal").modal("hide");

            setTimeout(() => {
                window.location.reload();
            }, 2000);

           // $(".spinner-wrapper").hide();
        },
        error: function () {
            alert("Enrollment failed!");
            $(".spinner-wrapper").hide();
        }
    });
}

</script>

