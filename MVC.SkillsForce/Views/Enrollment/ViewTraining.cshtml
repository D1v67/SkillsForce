
@model IEnumerable<Common.SkillsForce.Entity.TrainingModel>

@{
    ViewBag.Title = "Index";
}



@*<head>
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous" />

    </head>*@

<style>
    .card-container {
        /* background-color: #f0f0f0;*/ /* Set the background color for the card container */
        padding: 20px; /* Adjust the padding as needed */
    }

    .card {
        /*border: none;*/
        border-radius: 15px;
        transition: transform 0.3s ease-in-out;
        box-shadow: 0 8px 16px rgba(0, 0, 0, 0.3);
        margin-bottom: 40px; /* Adjust the margin between cards as needed */

    }

    .card-header {
        background-color: #3498db; /* Set the background color for the card header */
        color: #fff; /* Set the text color for the card header */
        padding: 10px; /* Adjust the padding for the card header */
        border-top-left-radius: 15px;
        border-top-right-radius: 15px;
    }

    .card:hover {
        transform: scale(1.05);
        box-shadow: 0 12px 24px rgba(0, 0, 0, 0.4);
    }

    .card-body {
        background-color: #e8eceb;
        padding: 15px;
    }
    .header-container {
        background: linear-gradient(131deg, rgba(9,91,134,1) 0%, rgba(93,184,218,1) 46%, rgba(34,114,215,1) 75%, rgba(22,157,217,1) 95%); /* Set your desired gradient colors */ /* Set your desired gradient colors */
        padding: 20px;
        color: #fff; /* Set the text color for the header */
        text-align: center;
        margin-bottom: 30px;
        border-radius: 15px;
        box-shadow: 0 8px 16px rgba(0, 0, 0, 0.3);
    }

    h1 {
        margin: 0;
    }
    
</style>


@*<h2>Index</h2>
<h2>@Session["Firstname"]</h2>
<h2>@Session["Email"]</h2>*@

@*<p>
        @Html.ActionLink("Create New", "Create")
    </p>*@

@*<div class="header-container">
    <h1>Trainings On Offer</h1>
</div>*@

<!-- Registration Modal with File Upload -->
<div class="modal fade" id="enrollModal" tabindex="-1" role="dialog" aria-labelledby="registrationModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="registrationModalLabel">Training Registration</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>

            <!-- Modified form with added onsubmit attribute -->
            <form id="enrollForm" onsubmit="saveEnrollment(); return false;" enctype="multipart/form-data">
                <div class="modal-body" id="modalBody">
                    <h3>Enroll in Training</h3>
                    <p>Your User ID: <span id="userIdInfo"></span></p>
                    <p id="trainingInfo"></p>

                    <label>You must meet all the following prerequisites:</label>
                    <div id="coursesCheckboxList"></div>

                    <button type="submit" class="btn btn-primary" id="saveBtn">Save</button>
                </div>
            </form>

            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>


<div id="trainingCardContainer" class="card-deck"></div>


<script src="~/Scripts/jquery-3.7.1.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script>

    document.addEventListener("DOMContentLoaded", function () {

        function loadData() {
            fetch('/Enrollment/ViewTrainingData', {
                method: 'GET',
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json'
                }
            })
                .then(response => {
                    if (response.ok) {
                        return response.json()
                    }
                    else {
                        console.log(response.status)
                    }
                })
                .then(data => updateTable(data))
                .catch(error => console.error('Error:', error));
        }
        function updateTable(data) {
            var cardContainer = document.querySelector('#trainingCardContainer');
            cardContainer.innerHTML = '';

            data.forEach(function (item) {
                let currentDate = new Date().toJSON().slice(0, 10);
                var registrationDeadlineDate = new Date(parseInt(item.RegistrationDeadline.substr(6)));
                var isEnrollmentOpen = registrationDeadlineDate >= new Date();

                var col = document.createElement('div');
                col.className = 'col-md-4 mb-3'; // Adjust the column size as needed

                var card = document.createElement('div');
                card.className = 'card shadow'; // Added box-shadow to the card
                // Added border-radius to the card

                // ...
                card.innerHTML = `
                        <div class="card-header">
                            <h5 class="card-title"><strong>${item.TrainingName}</strong> </h5>
                        </div>
                        <div class="card-body">
                            <p class="card-text">${item.TrainingDescription}</p>
                            <p class="card-text"><strong>Registration Deadline:</strong> ${formatDate(registrationDeadlineDate)}</p>

                            ${isEnrollmentOpen ? `<button type="button" class="btn btn-primary" data-toggle="modal" data-target="#enrollModal" onclick="enroll(${item.TrainingID})">Enroll</button>` : '<span style="color: red;">Enrollment Closed</span>'}
                        </div>
                     `;
                // ...

                col.appendChild(card);
                cardContainer.appendChild(col);
            });
        }

        //        <p class="card-text"><strong>Capacity:</strong> ${item.Capacity}</p>
        //<p class="card-text"><strong>Department ID:</strong> ${item.DepartmentID}</p>

        // format date in 'YYYY-MM-DD'
        function formatDate(date) {
            var year = date.getFullYear();
            var month = ('0' + (date.getMonth() + 1)).slice(-2);
            var day = ('0' + date.getDate()).slice(-2);
            return year + '-' + month + '-' + day;
        }

        loadData();
    });
</script>



<script>
    function enroll(trainingId) {
        // Set the training information in the modal
        /*$("#trainingInfo").text("Enroll in Training: " + trainingId);*/

        // Retrieve user information from the session
        //var userId = 1;


        var userId = parseInt("@HttpContext.Current.Session["UserID"]");

        console.log(userId)
        $("#trainingInfo").text("Enroll in Training: " + trainingId);
        $("#userIdInfo").text("User : " + userId);

        // Store the training ID in a data attribute of the modal
        $("#enrollModal").data("trainingId", trainingId);


        var enrollmentData = {
            UserID: userId,
            TrainingID: trainingId,

        };

        console.log(enrollmentData)
        // Call the controller action to get prerequisites
        $.ajax({
            url: '/Enrollment/GetPrerequisiteByTrainingID',
            type: 'GET',
            data: { TrainigID: trainingId },
            success: function (prerequisites) {
                console.log(prerequisites);
                populateCoursesCheckboxList(prerequisites);
            },
            error: function () {
                alert("Failed to fetch prerequisites!");
            }
        });
    }

    function populateCoursesCheckboxList(prerequisites) {
        var container = $("#coursesCheckboxList");
        container.empty();

        for (var i = 0; i < prerequisites.length; i++) {
            var prerequisite = prerequisites[i];

            var row = $('<div class="row mb-2">' +
                '<div class="col-2"><span class="badge bg-primary">' + prerequisite.PrerequisiteID + '</span></div>' +
                '<div class="col-6">' + prerequisite.PrerequisiteName + '</div>' +
                '<div class="col-4">' +
                '<div class="input-group">' +
                '<input type="file" class="form-control fileUploader" id="fileInput' + prerequisite.PrerequisiteID + '" required >' +
                '<input type="hidden" class="prerequisiteIdInput" value="' + prerequisite.PrerequisiteID + '">' +

                '</div>' +
                '</div>' +
                '</div>');

            container.append(row);
        }
    }



    function uploadFiles(trainingId, enrollmentId) {
        console.log('entered fucntion u')
        const fileInputs = document.getElementsByClassName('fileUploader');
        //const files = fileInput[0].files;

        const formData = new FormData();
        const prerequisiteIds = []; // Array to store prerequisite IDs


        for (const input of fileInputs) {
            var files = input.files;
            for (const element of files) {
                formData.append('files', element);

                var prerequisiteIdInput = input.parentElement.querySelector('.prerequisiteIdInput');
                var prerequisiteId = prerequisiteIdInput.value;

                // Append the prerequisite ID to the array
                prerequisiteIds.push(prerequisiteId);


            }
        }
        console.log(formData)
        formData.append('EnrollmentID', enrollmentId);
        // Append training ID, user ID, and generated enrollment ID to the form data
        formData.append('PrerequisiteIDs', prerequisiteIds.join(','));

        //formData.append('TrainingID', parseInt(trainingId));

  
        console.log(formData)
        debugger;

        fetch('/Enrollment/UploadFiles', {
            method: 'POST',
            body: formData
        })
            .then(response => response.json())
            .then(data => {
                console.log("File uploaded");
                console.log(formData)
            })
            .catch(error => {
                console.error('Error:', error);
            });
    }


    function saveEnrollment() {
        //var trainingId = $("#enrollModal").data("trainingId");
        var trainingId = parseInt($("#enrollModal").data("trainingId"));
        var saveButton = $("#saveBtn");
        //var trainingId = $("#trainingInfo").text().split(":")[1].trim();
        //var departmentId = $("#departmentDropdown").val();
        console.log("Insave "+trainingId);

        var userId = parseInt("@HttpContext.Current.Session["UserID"]");
        console.log(userId)

        // Ajax request to send data to the controller
        $.ajax({
            url: '/Enrollment/SaveEnrollment',
            type: 'POST',
            data: {
                UserID: parseInt(userId),
                TrainingID: trainingId,
                // Add other data such as departmentId if needed
                //courses: selectedCourses
            },
            success: function (result) {
                var generatedEnrollmentId = result.EnrollmentID;
                debugger;
                uploadFiles(parseInt(trainingId), parseInt(generatedEnrollmentId));

                alert("Enrollment successful!");
                saveButton.prop('disabled', true);

                //
                $("#enrollModal").modal("hide");

            },
            error: function () {
                alert("Enrollment failed!");
            }
        });
    }

</script>


